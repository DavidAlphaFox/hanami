(use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(cljs-repl)
(use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(cljs-repl)
(gensym)
(gensym "foo")
(gensym "hanami-")
:cljs/quit
(use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(require '[clojure.spec.alpha :as s])
(use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(use 'figwheel-sidecar.repl-api)
(start-figwheel!)
